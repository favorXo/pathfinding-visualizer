{"version":3,"sources":["node.jsx","helper.js","algorithms/bfs.js","algorithms/dijkstra.js","button.js","visualizer.jsx","index.js"],"names":["Node","id","this","props","row","col","property","mousedown","mouseup","mouseenter","x","y","width","height","className","getClass","onMouseDown","onMouseEnter","onMouseUp","Component","createGrid","start","finish","grid","i","push","j","createNode","distance","Infinity","visited","previous","editGrid","key","isValid","rowEnd","colEnd","BFS","cell","q","length","order","shift","concat","dijkstra","visitedNodesInOrder","unvisitedNodes","nodes","node","getAllNodes","sortNodesByDistance","closestNode","getOutput","getNodesInShortestPathOrder","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","finishNode","nodesInShortestPathOrder","currentNode","unshift","path","realOrder","realPath","Button","text","func","onClick","Visualizer","clearCanvas","bind","visualize","clearOrderAndPath","createMaze","state","isDown","speed","editState","running","console","log","setState","algorithm","pop","setTimeout","newGrid","count","map","handleMouseDown","handleMouseEnter","handleMouseUp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f9efce2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./styles/project-styles.css\";\n\nexport default class Node extends Component {\n    getClass(id) {\n        if (id === 0) {\n            return \"node-unvisited\";\n        } else if (id === 1) {\n            return \"node-wall\";\n        } else if (id === 2) {\n            return \"node-visited\";\n        } else if (id === 3) {\n            return \"node-path\";\n        } else if (id === 4) {\n            return \"node-start\";\n        } else if (id === 5) {\n            return \"node-finish\";\n        }\n    }\n    render() {\n        const {\n            row,\n            col,\n            property,\n            mousedown,\n            mouseup,\n            mouseenter,\n        } = this.props;\n        return (\n            <rect\n                id={row + \"-\" + col}\n                x={col * 35}\n                y={row * 35}\n                width=\"35\"\n                height=\"35\"\n                className={\"node \" + this.getClass(property)}\n                onMouseDown={() => mousedown(row, col)}\n                onMouseEnter={() => mouseenter(row, col)}\n                onMouseUp={() => mouseup()}\n            ></rect>\n        );\n    }\n}\n","export function createGrid(row, col, start, finish) {\r\n    let grid = [];\r\n    for (let i = 0; i < row; i++) {\r\n        grid.push([]);\r\n        for (let j = 0; j < col; j++) {\r\n            grid[i].push(createNode(i, j, 0));\r\n        }\r\n    }\r\n    grid[start[0]][start[1]].property = 4;\r\n    grid[finish[0]][finish[1]].property = 5;\r\n\r\n    return grid;\r\n}\r\n\r\nfunction createNode(row, col, property) {\r\n    return { row: row, col: col, property: property, distance: Infinity , visited: false, previous: null};\r\n}\r\n\r\nexport function editGrid(grid, key, row, col) {\r\n    grid[row][col] = createNode(row, col, key);\r\n    return grid;\r\n}\r\n\r\nexport function isValid(visited, row, col, rowEnd, colEnd){\r\n    if (row < 0 || col < 0 || row >= rowEnd  || col >= colEnd) {\r\n        return false\r\n    }\r\n    if (visited[row][col]) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n","import {isValid} from \"../helper\"\r\n\r\nexport default function BFS(grid, start){\r\n    let q = [[start]];\r\n    let x, y, cell;\r\n    let visited = [];\r\n    let rowEnd = grid.length;\r\n    let colEnd = grid[0].length;\r\n    let order = [];\r\n    for (let i = 0; i < rowEnd; i++) {\r\n        visited.push([])\r\n        for (let j = 0; j < colEnd; j++) {\r\n            visited[i].push(false);\r\n            if (grid[i][j].property === 1) {\r\n                visited[i][j] = true;\r\n            }\r\n        }\r\n    }\r\n    visited[start[0]][start[1]] = true;\r\n \r\n    while (q.length > 0) {\r\n        cell = q.shift();\r\n        x = cell[cell.length-1][0];\r\n        y = cell[cell.length-1][1];    \r\n        if (grid[x][y].property === 5) {\r\n            return [order, cell]\r\n        }\r\n        order.push([x,y])\r\n\r\n        for (let [row, col] of [[x, y+1], [x-1, y], [x, y-1], [x+1, y]]) {\r\n            if (isValid(visited, row, col, rowEnd, colEnd)) {\r\n                q.push(cell.concat([[row, col]]));\r\n                visited[row][col] = true;\r\n            }\r\n        }\r\n    }\r\n    return [order, false]\r\n}\r\n\r\n","export default function dijkstra(grid, start) {\r\n    const visitedNodesInOrder = [];\r\n    grid[start[0]][start[1]].distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      if (closestNode.property === 1) continue;\r\n      if (closestNode.distance === Infinity) return getOutput(visitedNodesInOrder, false);\r\n      if (closestNode.property === 5) return getOutput(visitedNodesInOrder, getNodesInShortestPathOrder(closestNode));\r\n\t\t\tclosestNode.visited = true;\r\n\t\t\tvisitedNodesInOrder.push(closestNode);\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n\tunvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n\tconst unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n\tfor (const neighbor of unvisitedNeighbors) {\r\n\t\tneighbor.distance = node.distance + 1;\r\n\t\tneighbor.previous = node;\r\n\t}\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n\tconst neighbors = [];\r\n\tconst {col, row} = node;\r\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\r\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\r\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\treturn neighbors.filter(neighbor => !neighbor.visited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n\tconst nodes = [];\r\n\tfor (const row of grid) {\r\n\t\tfor (const node of row) {\r\n\t\t\tnodes.push(node);\r\n\t\t}\r\n\t}\r\n\treturn nodes;\r\n}\r\n\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n\tconst nodesInShortestPathOrder = [];\r\n\tlet currentNode = finishNode;\r\n\twhile (currentNode !== null) {\r\n\t\tnodesInShortestPathOrder.unshift(currentNode);\r\n\t\tcurrentNode = currentNode.previous;\r\n\t}\r\n\treturn nodesInShortestPathOrder;\r\n}\r\n\r\nfunction getOutput(order, path) {\r\n\tconst realOrder = []\r\n\tlet realPath = false\r\n\tfor (const node of order) realOrder.push([node.row, node.col])\r\n\tif (path) {\r\n\t\t\trealPath = []\r\n\t\tfor (const node of path) realPath.push([node.row, node.col])\r\n\t}\r\n\treturn [realOrder, realPath]\r\n}","import \"./styles/button.css\";\r\n\r\nconst Button = ({ text, func }) => {\r\n  return (\r\n    <button className={\"custom-btn btn-11\"} onClick={func}>\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./node.jsx\";\r\nimport { createGrid, editGrid } from \"./helper\";\r\nimport BFS from \"./algorithms/bfs\";\r\nimport dijkstra from \"./algorithms/dijkstra\";\r\nimport maze from \"./algorithms/astar\";\r\nimport \"./styles/project-styles.css\";\r\nimport Button from \"./button.js\";\r\n\r\nexport default class Visualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.clearCanvas = this.clearCanvas.bind(this);\r\n    this.visualize = this.visualize.bind(this);\r\n    this.clearOrderAndPath = this.clearOrderAndPath.bind(this)\r\n    this.createMaze = this.createMaze.bind(this)\r\n    this.state = {\r\n      grid: [],\r\n      isDown: false,\r\n      speed: 10,\r\n      editState: 1,\r\n      start: [5, 5],\r\n      finish: [15, 40],\r\n      running: false,\r\n    };\r\n  }\r\n\r\n  createMaze(grid){\r\n    console.log(grid(this.state.grid, this.state.start));\r\n    this.setState({ grid: grid(this.state.grid, this.state.start) })\r\n  }\r\n\r\n  async visualize(algorithm) {\r\n    let [order, path] = algorithm(this.state.grid, this.state.start);\r\n    order.shift();\r\n    path.shift();\r\n    path.pop();\r\n    for (let i = 0; i <= order.length; i++) {\r\n      if (i === order.length) {\r\n        for (let j = 0; j < path.length; j++) {\r\n          let [x, y] = path[j];\r\n          await setTimeout(() => {\r\n            this.setState({ grid: editGrid(this.state.grid, 3, x, y), running: path.length === j});\r\n          }, this.state.speed * (i + j));\r\n        }\r\n      } else if (path){\r\n        let [x, y] = order[i];\r\n        await setTimeout(() => {\r\n          this.setState({ grid: editGrid(this.state.grid, 2, x, y), running: true});\r\n        }, this.state.speed * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearCanvas() {\r\n    if (this.state.running) return;\r\n    this.setState({\r\n      grid: createGrid(22, 53, this.state.start, this.state.finish),\r\n    });\r\n  }\r\n\r\n  clearOrderAndPath() {\r\n    if (this.state.running) return;\r\n    const newGrid = []\r\n    let count = 0\r\n    for (const row of this.state.grid) {\r\n      newGrid.push([])\r\n      for (const node of row) {\r\n        if (node.property === 2 || node.property === 3) node.property = 0\r\n        newGrid[count].push(node)\r\n      }\r\n      count += 1\r\n    }\r\n    this.setState({grid: newGrid})\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (this.state.running) return;\r\n    if (this.state.grid[row][col].property === 0) {\r\n      this.setState({\r\n        grid: editGrid(this.state.grid, 1, row, col),\r\n        isDown: true,\r\n        editState: 1,\r\n      });\r\n    } else if (this.state.grid[row][col].property === 1) {\r\n      this.setState({\r\n        grid: editGrid(this.state.grid, 0, row, col),\r\n        isDown: true,\r\n        editState: 0,\r\n      });\r\n    } else if (this.state.grid[row][col].property === 4) {\r\n      this.setState({\r\n        isDown: true,\r\n        editState: 4,\r\n      });\r\n    } else if (this.state.grid[row][col].property === 5) {\r\n      this.setState({\r\n        isDown: true,\r\n        editState: 5,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.running) return;\r\n    if (this.state.isDown) {\r\n      if (\r\n        this.state.grid[row][col].property === 0 &&\r\n        this.state.editState === 1\r\n      ) {\r\n        this.setState({\r\n          grid: editGrid(this.state.grid, 1, row, col),\r\n        });\r\n      } else if (\r\n        this.state.grid[row][col].property === 1 &&\r\n        this.state.editState === 0\r\n      ) {\r\n        this.setState({\r\n          grid: editGrid(this.state.grid, 0, row, col),\r\n        });\r\n      } else if (\r\n        this.state.grid[row][col].property === 0 &&\r\n        this.state.editState === 4\r\n      ) {\r\n        this.setState({\r\n          grid: editGrid(\r\n            editGrid(\r\n              this.state.grid,\r\n              0,\r\n              this.state.start[0],\r\n              this.state.start[1]\r\n            ),\r\n            4,\r\n            row,\r\n            col\r\n          ),\r\n          start: [row, col],\r\n        });\r\n      } else if (\r\n        this.state.grid[row][col].property === 0 &&\r\n        this.state.editState === 5\r\n      ) {\r\n        this.setState({\r\n          grid: editGrid(\r\n            editGrid(\r\n              this.state.grid,\r\n              0,\r\n              this.state.finish[0],\r\n              this.state.finish[1]\r\n            ),\r\n            5,\r\n            row,\r\n            col\r\n          ),\r\n          finish: [row, col],\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ isDown: false, editState: 1 });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = createGrid(22, 53, this.state.start, this.state.finish);\r\n    this.setState({ grid: grid });\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <>\r\n        <Button text=\"Reset\" func={() => this.clearCanvas()}></Button>\r\n        <Button text=\"Clear\" func={() => this.clearOrderAndPath()}></Button>\r\n        <Button text=\"BFS\" func={() => this.visualize(BFS)}></Button>\r\n        <Button text=\"Dijkstra\" func={() => this.visualize(dijkstra)}></Button>\r\n        <svg height=\"1080\" width=\"1920\" className=\"grid\">\r\n          {grid.map((row) => {\r\n            return row.map((col) => (\r\n              <Node\r\n                row={col.row}\r\n                col={col.col}\r\n                key={`${col.row}-${col.col}`}\r\n                property={col.property}\r\n                mousedown={(row, col) => this.handleMouseDown(row, col)}\r\n                mouseenter={(row, col) => this.handleMouseEnter(row, col)}\r\n                mouseup={() => this.handleMouseUp()}\r\n              ></Node>\r\n            ));\r\n          })}\r\n        </svg>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport Visualizer from './visualizer';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <h1>Pathfinding Visualizer</h1>\n        <Visualizer></Visualizer>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}